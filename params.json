{
  "name": "Node-geocoder",
  "tagline": "nodejs geocoding library ",
  "body": "# node-geocoder\r\n\r\n[![Build Status](https://img.shields.io/travis/nchaulet/node-geocoder.svg?style=flat-square)](https://travis-ci.org/nchaulet/node-geocoder)\r\n![Dependencycy status](https://img.shields.io/david/nchaulet/node-geocoder.svg?style=flat-square)\r\n[![npm version](https://img.shields.io/npm/v/node-geocoder.svg?style=flat-square)](https://www.npmjs.com/package/node-geocoder)\r\n\r\n\r\nNode library for geocoding and reverse geocoding. Can be used as a nodejs library\r\n\r\n## Installation (nodejs library)\r\n\r\n    npm install node-geocoder\r\n\r\n## Usage example\r\n\r\n```javascript\r\nvar NodeGeocoder = require('node-geocoder');\r\n\r\nvar options = {\r\n  provider: 'google',\r\n\r\n  // Optionnal depending of the providers\r\n  httpAdapter: 'https', // Default\r\n  apiKey: 'YOUR_API_KEY', // for Mapquest, OpenCage, Google Premier\r\n  formatter: null         // 'gpx', 'string', ...\r\n};\r\n\r\nvar geocoder = NodeGeocoder(options);\r\n\r\n// Using callback\r\ngeocoder.geocode('29 champs elysée paris', function(err, res) {\r\n  console.log(res);\r\n});\r\n\r\n// Or using Promise\r\ngeocoder.geocode('29 champs elysée paris')\r\n  .then(function(res) {\r\n    console.log(res);\r\n  })\r\n  .catch(function(err) {\r\n    console.log(err);\r\n  });\r\n\r\n// output :\r\n[{\r\n  latitude: 48.8698679,\r\n  longitude: 2.3072976,\r\n  country: 'France',\r\n  countryCode: 'FR',\r\n  city: 'Paris',\r\n  zipcode: '75008',\r\n  streetName: 'Champs-Élysées',\r\n  streetNumber: '29',\r\n  administrativeLevels: {\r\n    level1long: 'Île-de-France',\r\n    level1short: 'IDF',\r\n    level2long: 'Paris',\r\n    level2short: '75'\r\n  },\r\n  provider: 'google'\r\n}]\r\n```\r\n\r\n## Advanced usage (only google, here, mapquest, and opencage providers)\r\n\r\n```javascript\r\ngeocoder.geocode({address: '29 champs elysée', country: 'France', zipcode: '75008'}, function(err, res) {\r\n  console.log(res);\r\n});\r\n\r\n// OpenCage advanced usage example\r\ngeocoder.geocode({address: '29 champs elysée', countryCode: 'fr', minConfidence: 0.5, limit: 5}, function(err, res) {\r\n  console.log(res);\r\n});\r\n\r\n// Reverse example\r\n\r\n// Using callback\r\ngeocoder.reverse({lat:45.767, lon:4.833}, function(err, res) {\r\n  console.log(res);\r\n});\r\n\r\n// Or using Promise\r\ngeocoder.reverse({lat:45.767, lon:4.833})\r\n  .then(function(res) {\r\n    console.log(res);\r\n  })\r\n  .catch(function(err) {\r\n    console.log(err);\r\n  });\r\n\r\n// Batch geocode\r\n\r\ngeocoder.batchGeocode(['13 rue sainte catherine', 'another adress'], function (results) {\r\n  // Return an array of type {error: false, value: []}\r\n  console.log(results) ;\r\n});\r\n\r\n// Set specific http request headers:\r\nvar HttpsAdapter = require('node-geocoder/lib/httpadapter/httpsadapter.js')\r\nvar httpAdapter = new HttpsAdapter(null, {\r\n  headers: {\r\n    'user-agent': 'My application <email@domain.com>',\r\n    'X-Specific-Header': 'Specific value'\r\n  }\r\n});\r\n\r\nvar geocoder = NodeGeocoder({\r\n  provider: 'google',\r\n  httpAdapter: httpAdapter\r\n});\r\n```\r\n\r\n## Geocoder Provider\r\n\r\n* `google` : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use `options.clientId`and `options.apiKey`(privateKey) for business licence. You can also use `options.language` and `options.region` to specify language and region, respectively. Note that 'https' is required when using an apiKey\r\n* `here` : HereGeocoder. Supports address geocoding and reverse geocoding. You must specify `options.appId` and `options.appCode` with your license keys. You can also use `options.language`, `options.politicalView` ([read about political views here](https://developer.here.com/rest-apis/documentation/geocoder/topics/political-views.html)), `options.country`, and `options.state`.\r\n* `freegeoip` : FreegeoipGeocoder. Supports IP geocoding\r\n* `datasciencetoolkit` : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use `options.host` to specify a local instance\r\n* `openstreetmap` : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use `options.language` and `options.email` to specify a language and a contact email address.\r\n  * For `geocode`, you can use an object as value, specifying one or several parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters\r\n  * For `reverse`, you can use additional parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\r\n  * You should specify a specific `user-agent` or `referrer` header field as required by\r\n  https://wiki.openstreetmap.org/wiki/Nominatim_usage_policy\r\n* `mapquest` : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\r\n* `openmapquest` : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\r\n* `agol` : ArcGis Online Geocoding service. Supports geocoding and reverse. Requires a client_id & client_secret and 'https' http adapter\r\n* `tomtom`: TomTomGeocoder. Supports address geocoding. You need to specify `options.apiKey`\r\n* `nominatimmapquest`: Same geocoder as `openstreetmap`, but queries the MapQuest servers. You need to specify `options.apiKey`\r\n* `opencage`: OpenCage Geocoder. Uses multiple open sources. Supports address and reverse geocoding. You need to specify `options.apiKey`\r\n* `smartyStreet`: Smarty street geocoder (US only), you need to specify `options.auth_id` and `options.auth_token`\r\n* `geocodio`: Geocodio, Supports address geocoding and reverse geocoding (US only)\r\n* `yandex`: Yandex support address geocoding, you can use `options.language` to specify language\r\n* `teleport`: Teleport supports city and urban area forward and reverse geocoding; for more information, see [Teleport API documentation](https://developers.teleport.org/api/)\r\n* `opendata france`: OpendataFranceGeocoder supports forward and reverse geocoding in France; for more information, see [OpendataFrance API documentation](https://adresse.data.gouv.fr/api/)\r\n\r\n## Http adapter\r\n\r\n* `https`: This adapter uses the Https nodejs library (default)\r\n* `http`: This adapter uses the Http nodejs library\r\n\r\nYou can specify request timeout using paramater `options.timeout`\r\n\r\n## Formatter\r\n\r\n* `gpx`    : format result using GPX format\r\n* `string` : format result to an String array (you need to specify `options.formatterPattern` key)\r\n    * `%P` country\r\n    * `%p` country code\r\n    * `%n` street number\r\n    * `%S` street name\r\n    * `%z` zip code\r\n    * `%T` State\r\n    * `%t` state code\r\n\r\n## More\r\n\r\n### options\r\n\r\n[`node-geocoder-cli`](https://github.com/nchaulet/node-geocoder-cli) You can use node-geocoder-cli to geocode in shell\r\n\r\n### Extending node geocoder\r\n\r\nYou can add new geocoders by implementing the two methods `geocode` and `reverse`:\r\n\r\n```javascript\r\nvar geocoder = {\r\n    geocode: function(value, callback) { ... },\r\n    reverse: function(query, callback) { var lat = query.lat; var lon = query.lon; ... }\r\n}\r\n```\r\n\r\nYou can also add formatter implementing the following interface\r\n\r\n```javascript\r\nvar formatter = {\r\n    format: function(data) { return formattedData; },\r\n}\r\n```\r\n### Contributing\r\n\r\nYou can improve this project by adding new geocoders or http adapters.\r\n\r\nTo run tests just `npm test`.\r\n\r\nTo check code style install `jshint` and just run `jshint lib test`.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}