{"name":"Node-geocoder","tagline":"nodejs geocoding library ","body":"# node-geocoder\r\n\r\n[![Build Status](https://travis-ci.org/nchaulet/node-geocoder.png?branch=master)](https://travis-ci.org/nchaulet/node-geocoder)\r\n\r\n![Dependencycy status](https://david-dm.org/nchaulet/node-geocoder.png)\r\n\r\nNode library for geocoding and reverse geocoding. Can be used as a nodejs library or on command line\r\n\r\n## Installation and usage (geocoder command line)\r\n\r\n```shell\r\nnpm install -g node-geocoder\r\ngeocoder --provider google 'Fornino, 187 Bedford Ave, Brooklyn, NY 11211'\r\ngeocoder-reverse 48.858887 2.294486\r\n```\r\n\r\n## Installation (nodejs library)\r\n\r\n    npm install node-geocoder\r\n\r\n## Usage example\r\n\r\n```javascript\r\nvar geocoderProvider = 'google';\r\nvar httpAdapter = 'http';\r\n// optionnal\r\nvar extra = {\r\n    apiKey: 'YOUR_API_KEY', // for Mapquest, OpenCage, Google Premier\r\n    formatter: null         // 'gpx', 'string', ...\r\n};\r\n\r\nvar geocoder = require('node-geocoder')(geocoderProvider, httpAdapter, extra);\r\n\r\n// Using callback\r\ngeocoder.geocode('29 champs elysée paris', function(err, res) {\r\n    console.log(res);\r\n});\r\n\r\n// Or using Promise\r\ngeocoder.geocode('29 champs elysée paris')\r\n    .then(function(res) {\r\n        console.log(res);\r\n    })\r\n    .catch(function(err) {\r\n        console.log(err);\r\n    });\r\n\r\n// output :\r\n[{\r\n    latitude: 48.8698679,\r\n    longitude: 2.3072976,\r\n    country: 'France',\r\n    countryCode: 'FR',\r\n    city: 'Paris',\r\n    zipcode: '75008',\r\n    streetName: 'Champs-Élysées',\r\n    streetNumber: '29',\r\n    state: 'Île de France',\r\n    stateCode: 'IDF'\r\n}]\r\n\r\n## Advanced usage (only google provider)\r\ngeocoder.geocode({address: '29 champs elysée', country: 'France', zipcode: '75008'}, function(err, res) {\r\n    console.log(res);\r\n});\r\n\r\n// Reverse example\r\n\r\n// Using callback\r\ngeocoder.reverse({lat:45.767, lon:4.833}, function(err, res) {\r\n    console.log(res);\r\n});\r\n\r\n// Or using Promise\r\ngeocoder.reverse({lat:45.767, lon:4.833})\r\n    .then(function(res) {\r\n        console.log(res);\r\n    })\r\n    .catch(function(err) {\r\n        console.log(err);\r\n    });\r\n\r\n// Batch geocode\r\n\r\ngeocoder.batchGeocode(['13 rue sainte catherine', 'another adress'], function (results) {\r\n    // Return an array of type {error: false, value: []}\r\n    console.log(results) ;\r\n});\r\n\r\n```\r\n\r\n\r\n## Geocoder Provider\r\n\r\n* `google` : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use `extra.clientId`and `extra.apiKey`(privateKey) for business licence. You can also use `extra.language` and `extra.region` to specify language and region, respectively. Note that 'https' is required when using an apiKey\r\n* `freegeoip` : FreegeoipGeocoder. Supports IP geocoding\r\n* `datasciencetoolkit` : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use `extra.host` to specify a local instance\r\n* `openstreetmap` : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use `extra.language` and `extra.email` to specify a language and a contact email address.\r\n  * For `geocode`, you can use an object as value, specifying one or several parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters\r\n  * For `reverse`, you can use additional parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\r\n* `mapquest` : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\r\n* `openmapquest` : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\r\n* `agol` : ArcGis Online Geocoding service. Supports geocoding and reverse. Requires a client_id & client_secret and 'https' http adapter\r\n* `tomtom`: TomTomGeocoder. Supports address geocoding. You need to specify `extra.apiKey`\r\n* `nominatimmapquest`: Same geocoder as `openstreetmap`, but queries the MapQuest servers.\r\n* `opencage`: OpenCage Geocoder. Uses multiple open sources. Supports address and reverse geocoding. You need to specify `extra.apiKey`\r\n* `smartyStreet`: Smarty street geocoder (US only), you need to specify `extra.auth_id` and `extra.auth_token`\r\n* `geocodio`: Geocodio, Supports address geocoding and reverse geocoding (US only)\r\n* `yandex`: Yandex support address geocoding, you can use `extra.language` to specify language\r\n\r\n## Http adapter\r\n\r\n* `http`: This adapter uses the Http nodejs library (default)\r\n* `https`: This adapter uses the Https nodejs library\r\n\r\n## Formatter\r\n\r\n* `gpx`    : format result using GPX format\r\n* `string` : format result to an String array (you need to specify `extra.formatterPattern` key)\r\n    * `%P` country\r\n    * `%p` country code\r\n    * `%n` street number\r\n    * `%S` street name\r\n    * `%z` zip code\r\n    * `%T` State\r\n    * `%t` state code\r\n\r\n## More\r\n\r\nYou can improve this project by adding new geocoders or http adapters.\r\n\r\nTo run tests just `npm test`.\r\n\r\nTo check code style install `jshint` and just run `jshint lib test`.\r\n\r\n### Extending node geocoder\r\n\r\nYou can add new geocoders by implementing the two methods `geocode` and `reverse`:\r\n\r\n```javascript\r\nvar geocoder = {\r\n    geocode: function(value, callback) { ... },\r\n    reverse: function(query, callback) { var lat = query.lat; var lon = query.lon; ... }\r\n}\r\n```\r\n\r\nYou can also add formatter implementing the following interface\r\n\r\n```javascript\r\nvar formatter = {\r\n    format: function(data) { return formattedData; },\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}